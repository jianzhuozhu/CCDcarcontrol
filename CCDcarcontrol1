#include<MsTimer2.h>
//定义电机编码器AB相引脚
#define ENCODER_AL 2
#define ENCODER_BL 5
#define ENCODER_AR 3
#define ENCODER_BR 4
//定义电机驱动的控制信号
#define PWML 9
#define INL1 10
#define INL2 11
#define PWMR 8
#define INR1 12
#define INR2 13
#define PERIOD 20

#define AO_PIN   14
#define CLK_PIN  15
#define SI_PIN   16
uint8_t _adVal[128]; //存储CCD采样的AD值
uint8_t _ccdThreshold; //CCD阈值
uint8_t CCD_standard;//CCD标准值

volatile double encoderValL = 0, encoderValR = 0; //编码器值
double velocityL, velocityR;//速度
float TARGETL =-30; //左轮目标速度
float TARGETR =30; //右轮目标速度
float paste1L = 0, paste2L = 0;
float uallL = 0;
float paste1R = 0, paste2R = 0;
float uallR = 0;


//ccd的AD采样
void readTsl1401(void)
{
  uint8_t i = 0;
  digitalWrite(SI_PIN, HIGH);
  digitalWrite(CLK_PIN, HIGH);
  delayMicroseconds(1);
  digitalWrite(SI_PIN, LOW);
  digitalWrite(CLK_PIN, LOW);
  for (i = 0; i < 129; i++)
  {
    digitalWrite(CLK_PIN, HIGH);
    digitalWrite(CLK_PIN, LOW);
  }
  delay(30); //这里30ms是调整曝光时间，不同的值会获得不同的采样值
  //读取像素值
  digitalWrite(SI_PIN, HIGH);
  digitalWrite(CLK_PIN, HIGH);
  digitalWrite(SI_PIN, LOW);
  delayMicroseconds(1);
  for (i = 0; i < 128; i++)
  {
    _adVal[i] = analogRead(AO_PIN) >> 2; //Ardu1noUNO的模拟数字采样是10位的，最大值为1023
    digitalWrite(CLK_PIN, LOW);
    digitalWrite(CLK_PIN, HIGH);
    delayMicroseconds(2);
  }
  digitalWrite(CLK_PIN, HIGH);
  digitalWrite(CLK_PIN, LOW);
}

//CCD寻找中值函数返回值为中值
uint8_t ccdFindMidVal(void)
{
  uint8_t i, j, left, right, _ccdMidVal;
  float maxVal, minVal;
  readTsl1401();
  maxVal = _adVal[0]; //动态阈值算法，读取最大和最小值
  for (i = 5; i < 123; i++) //两边各去掉5个点
  {
    if (maxVal <= _adVal[i])
    {
      maxVal = _adVal[i];
    }
  }
  minVal = _adVal[0]; //最小值
  for (i = 5; i < 123; i++)
  {
    if (minVal >= _adVal[i])
      minVal = _adVal[i];
  }
  _ccdThreshold = (maxVal + minVal) / 2.0; //计算出本次中线緹取的國值
  left = 0;
  for (i = 5; i < 118; i++) //寻找左边跳变沿
  {
    if (_adVal[i] > _ccdThreshold &&
        _adVal[i + 1] > _ccdThreshold &&
        _adVal[i + 2] > _ccdThreshold &&
        _adVal[i + 3] < _ccdThreshold &&
        _adVal[i + 4] < _ccdThreshold &&
        _adVal[i + 5] < _ccdThreshold)
    {
      left = i;
      break;
    }
  }
  right = 128;
  for (j = 118; j > 5; j--) //寻找右边跳变沿
  {
    if (_adVal[j] < _ccdThreshold &&
        _adVal[j + 1] < _ccdThreshold &&
        _adVal[j + 2] < _ccdThreshold &&
        _adVal[j + 3] > _ccdThreshold &&
        _adVal[j + 4] > _ccdThreshold &&
        _adVal[j + 5] > _ccdThreshold)
    {
      right = j;
      break;
    }
  }
  if (left == 0 || right == 128)
  {
    //未检测到边沿
    _ccdMidVal = 225;
  }
  else
    _ccdMidVal = (uint8_t)((right + left) / 2); //计算中线位置
  return _ccdMidVal;
}

//CCD寻找中值函数返回值为左值
uint8_t ccdFindleftVal(void)
{
  uint8_t i, j, left, right, _ccdMidVal;
  float maxVal, minVal;
  readTsl1401();
  maxVal = _adVal[0]; //动态阈值算法，读取最大和最小值
  for (i = 5; i < 30; i++) //两边各去掉5个点
  {
    if (maxVal <= _adVal[i])
    {
      maxVal = _adVal[i];
    }
  }
  minVal = _adVal[0]; //最小值
  for (i = 5; i < 30; i++)
  {
    if (minVal >= _adVal[i])
      minVal = _adVal[i];
  }
  _ccdThreshold = (maxVal + minVal) / 2.0; //计算出本次中线緹取的國值
  return _ccdMidVal;
}

//CCD寻找中值函数返回值为右值
uint8_t ccdFindrightVal(void)
{
  uint8_t i, j, left, right, _ccdMidVal;
  float maxVal, minVal;
  readTsl1401();
  maxVal = _adVal[0]; //动态阈值算法，读取最大和最小值
  for (i = 90; i < 123; i++) //两边各去掉5个点
  {
    if (maxVal <= _adVal[i])
    {
      maxVal = _adVal[i];
    }
  }
  minVal = _adVal[0]; //最小值
  for (i = 90; i < 123; i++)
  {
    if (minVal >= _adVal[i])
      minVal = _adVal[i];
  }
  _ccdThreshold = (maxVal + minVal) / 2.0; //计算出本次中线緹取的國值
  return _ccdMidVal;
}

//获取编码器值
void getEncoderL(void)
{
  if (digitalRead(ENCODER_AL) == LOW)
  {
    if (digitalRead(ENCODER_BL) == LOW)
    {
      encoderValL--;
    }
    else
    {
      encoderValL++;
    }
  }
  else
  {
    if (digitalRead(ENCODER_BL) == LOW)
    {
      encoderValL++;
    }
    else
    {
      encoderValL--;
    }
  }
}
void getEncoderR(void)
{
  if (digitalRead(ENCODER_AR) == LOW)
  {
    if (digitalRead(ENCODER_BR) == LOW)
    {
      encoderValR--;
    }
    else
    {
      encoderValR++;
    }
  }
  else
  {
    if (digitalRead(ENCODER_BR) == LOW)
    {
      encoderValR++;
    }
    else
    {
      encoderValR--;
    }
  }
}

//PID控制器，初始值供参考，Kp=1,Ti=10,Td=0,T=PERIOD
int pidControllerL(float targetVelocity, float currentVelocity)
{
  float output;
  float q0, q1, q2, e, kp, td, t, ti, u;
  kp = 5;
  ti = 100;
  td = 120;
  t = PERIOD;
  e = targetVelocity - currentVelocity;
  q0 = kp * (1 + t / ti + td / t);
  q1 = -kp * (1 + 2 * td / t);
  q2 = kp * td / t;
  u = q0 * e + q1 * paste1L + q2 * paste2L;
  paste2L = paste1L;
  paste1L = e;
  uallL = uallL + u;
  if (uallL > 255)
  {
    uallL = 255;
  }
  if (uallL < -255)
  {
    uallL = -255;
  }
  output = uallL;
  return (int)output;

}

int pidControllerR(float targetVelocity, float currentVelocity)
{
  float output;
  float q0, q1, q2, e, kp, td, t, ti, u;
  kp = 5;
  ti = 100;
  td = 120;
  t = PERIOD;
  e = targetVelocity - currentVelocity;
  q0 = kp * (1 + t / ti + td / t);
  q1 = -kp * (1 + 2 * td / t);
  q2 = kp * td / t;
  u = q0 * e + q1 * paste1R + q2 * paste2R;
  paste2R = paste1R;
  paste1R = e;
  uallR = uallR + u;
  if (uallR > 255)
  {
    uallR = 255;
  }
  if (uallR < -255)
  {
    uallR = -255;
  }
  output = uallR;
  return (int)output;

}

//电机控制代码
void control(void)
{

  velocityL = (encoderValL / 780) * 3.1415 * 2 * (1000 / PERIOD);
  velocityR = (encoderValR / 780) * 3.1415 * 2 * (1000 / PERIOD);  
  
  encoderValL = 0;
  encoderValR = 0;
  
  int outputL = pidControllerL(TARGETL, velocityL);
  int outputR = pidControllerR(TARGETR, velocityR);
  if (outputL < 0)
  {
    digitalWrite(INL1, LOW);
    digitalWrite(INL2, HIGH);
  }
  else
  {
    digitalWrite(INL1, HIGH);
    digitalWrite(INL2, LOW);
  }
analogWrite(PWML, abs(outputL));
  analogWrite(PWML, abs(outputL));
  if (outputR < 0)
  {
    digitalWrite(INR1, LOW);
    digitalWrite(INR2, HIGH);
  }
  else
  {
    digitalWrite(INR1, HIGH);
    digitalWrite(INR2, LOW);
  }
analogWrite(PWMR, abs(outputR));
}

void setup()
{
  TCCR1B = TCCR1B & B11111000 | B00000001;
  pinMode(ENCODER_AL, INPUT);
  pinMode(ENCODER_BL, INPUT);
  pinMode(ENCODER_AR, INPUT);
  pinMode(ENCODER_BR, INPUT);
  Serial.begin(9600);
  attachInterrupt(0, getEncoderL, CHANGE);
  attachInterrupt(1, getEncoderR, CHANGE);
  pinMode(PWML, OUTPUT);
  pinMode(INL1, OUTPUT);
  pinMode(INL2, OUTPUT);
  pinMode(PWMR, OUTPUT);
  pinMode(INR1, OUTPUT);
  pinMode(INR2, OUTPUT);
  //初始化 ccd引脚
  pinMode(CLK_PIN, OUTPUT);
  pinMode(SI_PIN, OUTPUT);
  pinMode(AO_PIN, INPUT);
  digitalWrite(CLK_PIN, LOW);
  digitalWrite(SI_PIN, LOW);
  MsTimer2::set(PERIOD,control);
  MsTimer2::start();
}

void loop()
{
  uint8_t midVal=ccdFindMidVal();
  uint8_t leftVal=ccdFindleftVal();
  uint8_t rightVal=ccdFindrightVal();
  if((midVal-leftVal)<40)
  {
    TARGETL=-40;
  }
  else
  {
    TARGETL=-30;
  }
  if((midVal-rightVal)<40)
  {
    TARGETR=40;
  }
  else
  {
    TARGETR=30;
  }
  //通过串口绘图，观察波形
  Serial.print(velocityL);
  Serial.print("       ");
  Serial.print(velocityR);
  Serial.print("\r\n");
}
